*apptpl.txt*    Apply Template Vim Plugin                         Jun 21, 2009
*apptpl.vim*

Author:     Alessandro Antonello    <antonello.ale@gmail.com>
                                                              *apptpl-license*
License:    This file and the companion script "apptpl.vim" lies in the public 
            domain. There is no warranty of any kind.

=======================================================================================
1. Contents                                                  *apptpl-contents*

            1. Contents.........................: |apptpl-contents|
            2. Installing.......................: |apptpl-install|
            3. Uninstalling.....................: |apptpl-uninstall|
            4. Description......................: |apptpl-help|
            5. Configuration....................: |apptpl-config|
            6. Options..........................: |apptpl-options|
            7. Usage............................: |apptpl-usage|
            8. Templates........................: |apptpl-templates|
                8.1 Macros......................: |apptpl-macros|
                8.2 Eval........................: |apptpl-eval|
                8.3 Snippets....................: |apptpl-snippets|
                8.4 Includes....................: |apptpl-includes|
            9. Default Macros...................: |apptpl-default-macros|
           10. ChangeLog........................: |apptpl-changes|

==============================================================================
2. Installing                                                 *apptpl-install*

            Just copy the files into the Vim directory. Or you can use any
            plugin manager of your choice. Also, you will need to update the
            Vim help system using the following command: >

            :helptags [your_vim_directory_here]/doc
<
            And thats almost it. The plugin is installed but you should read 
            the |apptpl-help| to get to know what you need to configure before 
            you can use the plugin.

==============================================================================
3. Uninstalling                                             *apptpl-uninstall*

            Delete the plugin files:

            [your_vim_directory]/plugin/apptpl.vim
            [your_vim_directory]/doc/apptpl.txt

            Then, update Vim's help tags file. >

            :helptags [your_vim_directory]/doc

<
            It's all done.

==============================================================================
4. Description                                                   *apptpl-help*

            A simple script to load and apply templates for your most used
            file types. There is a lot of boilerplate work when we, let's say,
            need to start a new Java class, for example.

            1) Create the file;
            2) Type a head comment with some explanation;
            3) Write the class declaration, base classes, implemented
            interfaces, etc;
            4) Write constructors and so.

            For a C++ class there is a lot more work. So we can automate some
            of these things using template files which are half way ready to
            be used.

            With this script we can have global templates, personal templates
            and project templates at the same time.

==============================================================================
5. Configuration                                               *apptpl-config*

            Before starting to use the plugin you will need to define the
            default template path. The plugin has an "atpl" directory with
            some default templates. You can put this directory into your own
            Vim directory and set a global variable: >

            let g:atpl_TemplatePath = '~/.vim/atpl'

<
            This works on most *Nix systems. If you are in Windows you will
            need to put a line almost like this: >

            let g:atpl_TemplatePath = '$VIM/vimfiles/atpl'
<
            Notice that environment variables are allowed inside the path
            string. The script will expand then properly. See the
            |g:atpl_TemplatePath|.

            If you don't want to load the plugin, you only need to put a line,
            in your ".vimrc", like this: >

            let g:loaded_apptpl = 1
<
            That's it.

==============================================================================
6. Options                                                    *apptpl-options*

                                                             *g:loaded_apptpl*
g:loaded_apptpl ~
            Setting this will prevent the plugin to be sourced. The first 
            lines of the plugin have the following code: >

            if exists('g:loaded_apptpl')
              finish
            endif
<
            So, If the plugin is causing any trouble you can disable it easily 
            just setting this in your "vimrc" file: >

            let g:loaded_apptpl = 1
<

                                                         *g:atpl_TemplatePath*
g:atpl_TemplatePath ~
            A comma separated list of paths. This defines where the plugin 
            will look for template files and snippets files. The search in the 
            paths listed in this option is done using |globpath()|. So, the 
            rules of that function applies. The script will use the first 
            match found.

            Example: >

            let g:atpl_TemplatePath = '$VIM/vimfiles/templates,$HOME/apptpl'
<
            The last path is searched first. This enable one to overwrite a
            default template without changing the original file. If you have a
            "class.java" in "$VIM/vimfiles/templates" and another "class.java"
            in "$HOME/apptpl" the one in "$HOME/apptpl" will be used because
            it will be found first.

            You can use a global configuration with global templates, setting
            this option in a global "vimrc" file. >

            let g:atpl_TemplatePath = '$VIM/vimfiles/atpl'
<
            Then you can have a project, with some custom templates. To use
            both the custom templates and global templates you add the path
            to the variable: >

            let g:atpl_TemplatePath .= ',[project_template_path]'
<

                                                           *g:atpl_SnippetMap*
g:atpl_SnippetMap ~
            Set the mapping for using with snippets only. For use with file 
            templates the command |:Template| is provided.

            This can be set to a key sequence to be typed when one code 
            snippet should be loaded. For example: >

            let g:atpl_SnippetMap = '<C-S>'
<
            Then you could type "for<C-S>" in a buffer and have the code 
            snippet for a "for loop" placed at the cursor location. The "for" 
            word it self is replaced by the content of the snippet. If there 
            is something before or after it is kept unchanged. The mapping is 
            done only for Insert mode (|imap|) and Normal mode (|nmap|).

            If a mapping is not provided there is no default. That is, no 
            mapping will be available for use. You can still load snippets 
            with the command |:Apply|.

                                                            *g:atpl_UsersList*
g:atpl_UsersList ~
            A dictionary (see |Dictionary|) with your own list of macros with 
            replacement values. For example, suppose you have a template file 
            with the following line: >

            Maintainer: <{$USERNAME$}>
<
            Then this option can be set with the following value: >

            let g:atpl_UsersList['$USERNAME$'] = "John Doe"
<
            And the plugin will replace the macro "<{$USERNAME$}>" with the 
            words "John Doe" when loading this template. You also can use a
            VimL function: >

            let g:atpl_UsersList['$CURRDATE$'] = "strftime('%c')"
<
            The plugin will use the |eval()| function to evaluate the value 
            for that macro. So |sandbox| apply.

            The users list has precedence over all others lists. That means you 
            can override any value that is already in a internal list.

==============================================================================
7. Usage                                                        *apptpl-usage*

                                                                   *:Template*
            The usage is simple. Suppose you create a new file on VIM and you 
            want to apply a template named 'def_header.h'. You go to the 
            command window and type: >

            :Template def_header.h
<
            The script will search all directories defined in the 
            |g:atpl_TemplatePath| option to find a file named "def_header.h". 
            All macros will be searched, values replaced, and the result lines
            will be applied in the buffer starting at cursor position.

                                                                      *:Apply*
            If you want to apply a code snippet, you can do the same thing, 
            using the command ":Apply". >

            :Apply if
<
            This will search all snippet files to find a snippet named "if". 
            When found, the snippet will be processed just like a template 
            file. That is, all macro variables will be replaced, and the 
            result code will be put starting at the cursor position.

            If you setted a key mapping with |g:atpl_SnippetMap| option, you 
            can type "if" directly in the buffer. Then using the mapping you
            defined, the plugin will "expand" the snippet code.

==============================================================================
8. Templates                                                *apptpl-templates*

            There are two kinds of files in the template folder. Template
            files has any name and any extension. They are used with the
            |:Template| command. Snippets files have the name "snippets" and
            any extension. They are used with the |:Apply| command.

            I didn't want to create a syntax file for this plugin. What I want
            was to edit an snippet or template file using the current Vim
            rules for that file type. So, a snippet of template file uses the
            same extensions as any other filetype. To be more clear, a C++
            snippet has the ".cpp" extension. A Javascript snippet has a ".js"
            extension and so on.

            This set of "what I want" requirements made the searching of
            correct files a little tricky because we don't want to load a
            "class.cpp" template file when are creating a "class.h" file.
            So, the search engine will first seek for a file with the same
            extension as the current buffer, then it will seek for a file with
            the extension of the current |filetype|.

                                                               *apptpl-macros*
            Inside a template or snippet file we write macros that will be
            replaced by values in the users list (see |g:atpl_UsersList|), or
            in the default plugin list. If no replacement is found the plugin
            will ask for the value to replace that macro. The question will be
            done in the command line and has a form like this: >

            Type the value for variable NAME: 
<
            A macro must start with "<{" and ended with "}>". Inside of it
            you can have a "substitution" variable or a "in place"
            substitution.

            A substitution variable is just a name that will be replaced by 
            the script when the template is processed. Thus, it must have the 
            form "$VARIABLE$". Example: >

            /*
             * file: <{$FILENAME$}>
             */
<
            When this template is loaded the macro "<{$FILENAME$}>" will be
            replaced by whatever is its value. The plugin will search for a
            value in the users list, then in the internal list and, if none
            was found, ask the user to supply one. See |apptpl-default-macros|
            for the list of internal macros in the plugin.

            You can provide a default replacement for a macro in the users
            list: >

            let g:atpl_UsersList["$AUTHORMAIL$"] = '<author at domain do com>'
<
            Then the following piece of code will be replaced with the
            previous definition. >

            /*
             * Maintainer: <{$AUTHORMAIL$}>
             */
<
            A replacement for a macro can also be a VimL function. You could
            customize a long date line: >

            let g:atpl_UsersList[$LONGDATE$] = 'strftime("%B %d, %Y")'
<
            And use it in a header template: >

            /*
             * file: <{$FILENAME$}>
             * Maintainer: <{$AUTHORMAIL$}>
             * Since: <{$LONGDATE$}>
             */
<
            When using a VimL function, the rules of an "in place" macro apply.

                                                                 *apptpl-eval*
            An "in place" macro is one that doesn't have a variable name. 
            Instead it has an evaluation expression that the script will 
            execute in place. See |eval| for help with VIM expressions.

            An evaluation expression has the form: >

            <{#strftime('%c')#}>
<
            Notice that the start and end sequence are the same, ("<{" and 
            "}>"). Instead of enclose the expression with "$" signs it is 
            enclosed in "#" signs. This tells the script that the content of 
            this macro is not to be searched in one of the groups of variables 
            to found a match. This macro is evaluated immediately.

            Note that white spaces in the macro expression are evaluated "as 
            is". That means white spaces are relevant where they should be.

            What out with clever expressions in macros. The script will 
            evaluate it before writing the current buffer so, you cannot move 
            to another buffer or close the current file. Also, expressions 
            that will create a lot of lines of code may cause the script to 
            report some exceptions.

                                                             *apptpl-snippets*
            Snippets are small templates used in a way to automate repetitive
            pieces of text (or code). Snippets are defined in a file named
            "snippets" with the extension of a file type. For example,
            snippets used in a C file type are defined in a "snippets.c" file.

            As of all snippets are defined inside one single file, the plugin
            will recognise the lines by a name. The name must enclose the
            lines of the snippet code. >

            // <+for+>
            for (<{$VAR1$}> i = 0; i < <{$VAR2$}>; i++) {
                <|>
            }
            // <+for+>
<
            In this example the "for" block is enclosed in the "<+for+>"
            snippet name. Then if you type: >

            :Apply for
<
            In the command line the 3 lines will be read, the variables will
            be replaced in the same way of a template file does, and applied
            at the cursor position in the current buffer. The "<|>" macro is a
            tip for the plugin where to put the cursor after the snippet
            expansion.

            In the above example the "<+for+>" macro was in a commented line.
            But this is not required.

                                                              *apptpl-includes*
            At some point you will see that the snippets you wrote for one
            language can also be used in another one. You don't need to write
            everything again. You can just include one snippet into another
            using the instruction "<{<snippet.ext>}>". For example, snippets
            for C language can also be used in C++ files, in Java files, in
            Javascript files, in PHP files and others. So, after you create
            your own set of snippets for the C language (written into a
            "snippets.c" file), you can create a "snippets.cpp" file with just
            one line: >

            // <{<snippets.c>}>
<
            And thats it. Then, if you write a "snippets.php" file with the
            following line: >

            # <{<snippets.cpp>}>
<
            There is no problem. The plugin will include the "snippets.cpp"
            and the "snippets.c", following all include instructions.

            Files are included before any expansion. Is not possible to
            include a file inside a macro replacement or "in place"
            evaluation. The plugin also protects you against circular
            references. So if you had included the "snippets.php" file inside
            the "snippets.cpp" file, in the example above, the plugin will
            tell you about the circular reference.

            You can include any file. This is not restricted to snippets
            files. For example, you can have a license term, in a text file,
            and include it in all headers of all your templates. >

            /*
             * file: <{$FILENAME$}>
             * author: <{$AUTHOR$}> <{$AUTHORMAIL$}>
             * since: <{#strftime('%c')#}>
             * copyright:
             * <{<copyright.txt>}>
             */
<
            The file must lie in one directory searched by the plugin. That
            is, in one directory defined in the |g:atpl_TemplatePath|
            variable.

            Note: All snippets and template files should be written using
            UTF-8. The plugin expects that, and converts the encoding
            accordingly when needed.

==============================================================================
9. Default Macros                                      *apptpl-default-macros*

            This is a list of default macros defined inside the script. They 
            can be used anywhere inside a template or snippet.

                                                                  *$FILENAME$*
$FILENAME$  ~
            The result is the expression of "expand('%:t')" (see |expand()|)
            that will be evaluated to the name of the current file.

                                                                  *$BASENAME$*
$BASENAME$  ~
            The result is the expression of "expand('%:t:r')" (see |expand()|) 
            that will be evaluated to the root fo the current file  name (the
            extension excluded).

                                                                 *$UFILENAME$*
$UFILENAME$ ~
            Like the |$FILENAME$| variable but in upper case.

                                                                 *$UBASENAME$*
$UBASENAME$ ~
            Like the |$BASENAME$| variable but in upper case.

                                                                 *$LFILENAME$*
$LFILENAME$ ~
            Like the |$FILENAME$| variable but in lower case.

                                                                 *$LBASENAME$*
$LBASENAME$ ~
            Like the |$BASENAME$| variable but in lower case.

                                                                  *$DATETIME$*
$DATETIME$  ~
            The result is the expression of "strftime('%c')" that will be 
            evaluated to the current date and time of the day. See 
            |strftime()|.
            
                                                                  *$LONGDATE$*
$LONGDATE$  ~
            The result is the expression of "strftime('%Y %B %d')" that will
            be evaluated to the current date. See |strftime()|.
            
                                                                 *$SHORTDATE$*
$SHORTDATE$ ~
            The result is the expression of "strftime('%Y-%m-%d')" that will
            be evaluated to the current date. See |strftime()|.
            
                                                                  *$LONGTIME$*
$LONGTIME$  ~
            The result is the expression of "strftime('%H:%M:%S')" that will
            be evaluated to the current time of the day. See |strftime()|.
            
                                                                 *$SHORTTIME$*
$SHORTTIME$ ~
            The result is the expression of "strftime('%H:%M')" that will be
            evaluated to the current time of the day. See |strftime()|.
            
                                                          *apptpl-user-macros*
User Macros ~
            All the above variables can be overridden by one with the same
            name at the global list |g:atpl_UsersList|. Example: >

            let g:atpl_UsersList["$LONGDATE$"] = "strftime('%B %d, %Y')"
<
            There is no need to declare all variables in uppercase. But the 
            script search is case sensitive. So "$LONGDATE$" and "$LongDate$" 
            are two different variables names.

            If the script found a variable that isn't in any list it will ask 
            you about the value. In the command window, the following text 
            will appear:    >

            Type the value for variable 'NAME':
<
            Where "NAME" will be replaced with the name of the variable that 
            it didn't find.

==============================================================================
                                                              *apptpl-changes*
Changes ~

            Jun 21, 2009
            - First release.

            Jun 5, 2013
            - Including support for others character sets.
            - Changes in the documentation.

            Aut 25, 2013
            - Changed the way the conversion of character sets is done.

vim:tw=78:ts=4:sw=4:ft=help:fo=tcroq:ai:
